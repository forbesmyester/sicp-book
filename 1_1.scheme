; 1.1

;; 1.1.1

;;; Scheme is a LISP and as such uses prefix notation.

(+ (* 3
      (+ (* 2 4)
         (+ 3 5)))
   (+ (- 10 7)
      6))

;; 1.1.2

(define size 2)

;; 1.1.3
;; 1.1.4

(define (square x) (* x x))

(square 3)

(square 4)

(define (sum-of-squares x y) (+ (square x) (square y)))

(sum-of-squares 3 3)

;; 1.1.6

(define (abs x)
  (cond ((> x 0) x)
        ((< x 0) (- x))
        (else 0)))

;;; Exercise 1.2

(/ (+ 5 4
      (- 2 (- 3 (+ 6 (/ 4 5)))))
   (* 3 (- 6 2) (- 2 7)))

;;; Exercise 1.3

(define (sum-of-two-squares a b c)
  (cond ((and (< a b) (< a c)) (+ (square b) (square c)))
        ((and (< b a) (< b c)) (+ (square a) (square c)))
        (else (+ (square a) (square c)))))

(sum-of-two-squares 1 2 3)

;;; Exercise 1.4

;;;; The inner `if` returns either the function `+` or the function `-`
;;;; depending on if the value of `b` is positive or negative. The effect is that
;;;; if `b` is negative then you are subtracting a negative `b` from `b`, which
;;;; in effect is `a` plus the absolute `b`

;;; Exercise 1.5

;;;; If it is applicative, then it will enter a recurive loop
;;;; If it is normal order then it will return 0

(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0.001))

(define (average x y)
  (/ (+ x y) 2))

(define (improve guess x)
  (average guess (/ x guess)))

(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x)
                 x)))

(define (sqrt x) (sqrt-iter 1.0 x))

(sqrt 4)

;;; Exercise 1.7

(define (new-if predicate then-clause else-clause)
  (cond (predicate then-clause)
        (else else-clause)))

(define (new-sqrt-iter guess x)
  (new-if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x)
                 x)))

(define (new-sqrt x) (new-sqrt-iter 1.0 x))

(new-sqrt 4)

(define (try a)
  (if (= a 0) 0 (/ 1 a)))

(define (new-try a)
  (new-if (= a 0) 0 (/ 1 a)))

;;;; `if` only evaluates the form that is necessary to get the answer. `new-if`
;;;; will evaluate all forms passed to it. Thus the above will cause a division
;;;; by zero and `new-sqrt-iter` enters an infinite loop.

;;; Exercise 1.8

;;;; x / y 2 + 2 y 4

(define (cube x) (* x x x))

(define (cube-good-enough? guess x)
  (< (abs (- (cube guess) x)) 0.001))

(define (cube-improve-guess guess x)
  (/ (+ (/ x (* guess guess)) (* 2 guess)) 3))

(define (cube-iter guess x)
    (if (cube-good-enough? guess x)
      guess
      (cube-iter (cube-improve-guess guess x) x)))

(define (cube-root x) (cube-iter 1.0 x))

(cube-root 8)

(exp (* 2 (log 3))))
