;;; Exercise 1.9

;;;; The first is recursive, the second is iterative.

;;; Exercise 1.10

(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))

(A 1 10) ;;;; 1024
(A 0 (A 1 9))
(A 0 (A 0 (A 1 8)))
(A 0 (A 0 (A 0 (A 1 7)))

(A 2 4) ;;;; 65536

(A 3 3) ;;;; 65536

(define (f n) (A 0 n)) ;;;; n*2

(define (g n) (A 1 n)) ;;;; 2^n

(define (h n) (A 2 n)) ;;;; (2^(2^(2^1))) - for three, more brackets when incrementing n

;;; 1.11

 r f(n) = n if n<3 and f(n) = f(n - 1) + 2f(n - 2) + 3f(n - 3) if n> 3

(define (f n)
  (if (< n 3) n
    (+ (f (- n 1))
       (* 2 (f (- n 2)))
       (* 3 (f (- n 3))))))

; f3 =
        (f 3)
; f3 =
        (+ (f 2) (* 2 (f 1)) (* 3 (f 0)))
; f3 =
        (+ 2 (* 2 1) (* 3 0)) ; First line of f4
; f4 =
        (f 4)
; f4 =
        (+ (f 3) (* 2 (f 2)) (* 3 (f 1)))
; f4 =
        (+ (+ (f 2) (* 2 (f 1)) (* 3 (f 0)))
          (* 2 2)
          (* 3 1))
; f4 =
        (+ (+ 2 (* 2 1) (* 3 0))
          (* 2 2)
          (* 3 1))

; (f 1) 1
; (f 1) 2
; (f 3) 3
; (f 3) 4
; (f 4) 11 (+ 5)
; (f 5) 25 (+ 14)
; (f 6) 59 (+ 34)


(define (f n)
  (define (f3 a b c)
    )
  (f3 0 n (- n 1) (-n 2) (- n 3))

;;; 1.12

;; Pascals Triangle

;               1
;             1   1
;           1   2   1
;         1   3   3   1
;       1   4   6   4   1
;     1   5  10  10   5   1
;   1   6  15  20  15   6   1
  1   7  21  35  35  21   7  1

; count of items on a row is also the row number
; if col = row number then 1
; if col = 1 then 1
; if col = row -1 then col
; if col = 2 then col

; solution implemented from https://www.mathsisfun.com/pascals-triangle.html using factorials

(define (fac n) 
  (cond ((< n 2) n)
        (else (* n (fac (- n 1))))))

(define (pascalx row col)
  (cond ((= row col) 1)
        ((= col 0) 1)
        (else (let ((orow (+ row 0)) (ocol (+ col 0)))
                (/ (fac orow) (* (fac ocol) (fac (- orow ocol))))))))

(define (pascal row col) (pascalx (- row 1) (- col 1)))

(pascal 5 3)

(define (recpasc row col)
  (cond ((= row col) 1)
        ((= col 1) 1)
        (else (+ (recpasc (- row 1) (- col 1)) (recpasc (- row 1) col)))))

(recpasc 5 3)


;;; 1.14

(count-change 11
 (cc 11 5)
  (+
   (cc 11 4)
    (+
      (cc 11 3)
      (cc -14 4) x
    )
   (cc -41 4) x
  )
 )

Seems that (stack) space goes up denominations, but time space probably goes with change (because it will cause more non negatives)
